using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libcmark-gfm-extensions"], :libgfm_extensions),
    LibraryProduct(prefix, ["libcmark-gfm"], :libgfm),
    ExecutableProduct(prefix, "cmark-gfm", :gfm),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/pfitzseb/GFMBuilder/releases/download/v0.29.0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/gfm.v0.29.0.aarch64-linux-gnu.tar.gz", "50a6e9888ab825de6492d3b08fa1d3410fe458f7ec4ac1053cb1dd1b054e445f"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/gfm.v0.29.0.aarch64-linux-musl.tar.gz", "776ae2bcd34c7519c16e7b38274f5de508ef282ed3356c79016bcd4c66d0e5eb"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/gfm.v0.29.0.arm-linux-gnueabihf.tar.gz", "4c5daf396108cb8f11282b2cdbcdd61746fa260d1f42f998db642a9e920626cb"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/gfm.v0.29.0.arm-linux-musleabihf.tar.gz", "21e8605f2d4827af9f215c95048296fad988b69cc636a70afd9227028ff3f3b8"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/gfm.v0.29.0.i686-linux-gnu.tar.gz", "39bef3ccd707eb9f9a21f93bbf43a26debe3e9e21755760c227f6eeb7304b204"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/gfm.v0.29.0.i686-linux-musl.tar.gz", "ab6fcfd89def0eca9b98641512a0f08394a533e6bf9ce4c3522bc06237a5085d"),
    Windows(:i686) => ("$bin_prefix/gfm.v0.29.0.i686-w64-mingw32.tar.gz", "674c6d98f7e856feb9b5cb60e627b3891a5c08e9160e096f77b505fa05c1c624"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/gfm.v0.29.0.powerpc64le-linux-gnu.tar.gz", "55199e8cf2e394ba2a50aa3d9998d061b4e0f0ea281e338b00c8127686de5031"),
    MacOS(:x86_64) => ("$bin_prefix/gfm.v0.29.0.x86_64-apple-darwin14.tar.gz", "b996dd28dbf4778a8581862bd95743eeefeceeff9cf50125fa716cda72acb07f"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/gfm.v0.29.0.x86_64-linux-gnu.tar.gz", "25cc40b2d7e80900539fc9df35c56be5db0d6040f629ed50b311e6b364abc8f7"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/gfm.v0.29.0.x86_64-linux-musl.tar.gz", "4144f61f34e42eff21d5ecb4b92da06208f93bf68c823a95a278cffef66cb042"),
    FreeBSD(:x86_64) => ("$bin_prefix/gfm.v0.29.0.x86_64-unknown-freebsd11.1.tar.gz", "332040f7db1486f47a15c89492835760dd79017156d0bbed26f87dbab4554a05"),
    Windows(:x86_64) => ("$bin_prefix/gfm.v0.29.0.x86_64-w64-mingw32.tar.gz", "27c2e37336bde77be090de04232a31aaa5c90cdcb2351b46b56c398d82b50e26"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
